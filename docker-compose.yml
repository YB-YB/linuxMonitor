version: '3.8'

services:
  backend:
    build: 
      context: ./linux-monitor-backend
      dockerfile: Dockerfile
    container_name: linux-monitor-backend
    privileged: true  # 系统监控需要特权模式
    volumes:
      # 生产环境挂载
      - /proc:/host/proc:ro  # 挂载宿主机的 /proc 目录（只读）
      - /sys:/host/sys:ro    # 挂载宿主机的 /sys 目录（只读）
      - /:/rootfs:ro         # 挂载根文件系统（只读）
      # 日志持久化
      - backend-logs:/app/logs
      # 开发环境可选：取消注释下面一行进行代码热重载
      # - ./linux-monitor-backend:/app
    environment:
      - HOST_PROC=/host/proc
      - HOST_SYS=/host/sys
      - HOST_ROOT=/rootfs
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Shanghai
    ports:
      - "8002:8002"
    restart: unless-stopped
    networks:
      - monitor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build: 
      context: ./linux-monitor-dashboard
      dockerfile: Dockerfile
      args:
        - VITE_DOCKER_ENV=true
        - VITE_API_BASE_URL=/api/monitor
        - VITE_WS_BASE_URL=auto
    container_name: linux-monitor-dashboard
    volumes:
      # nginx 配置文件
      - ./linux-monitor-dashboard/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # 开发环境可选：取消注释下面一行进行代码热重载
      # - ./linux-monitor-dashboard/src:/app/src:ro
    ports:
      - "8001:80"  # 映射到容器内的80端口
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - monitor-network
    environment:
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  monitor-network:
    driver: bridge
    name: linux-monitor-network

volumes:
  backend-logs:
    driver: local
